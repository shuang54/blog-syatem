{
    "sourceFile": "src/API/requests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1645859460949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1645859554289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n //利用axios对象的create方法,创建一个axios实例\r\n const requests = axios.create({\r\n   //配置对象\r\n   //基础路径\r\n-  baseURL: \"https://mock.apipost.cn/app/mock/project/dc05a74e-8292-4fd7-b7a8-ff491962b806/\",\r\n+  baseURL: \"https://mock.apipost.cn/app/mock/project/dc05a74e-8292-4fd7-b7a8-ff491962b806/blog\",\r\n   timeout: 5000,\r\n })\r\n //请求拦截器:在发送请求之前，可以做一些事情\r\n requests.interceptors.request.use((config) => {\r\n"
                },
                {
                    "date": 1645861162827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n })\r\n //请求拦截器:在发送请求之前，可以做一些事情\r\n requests.interceptors.request.use((config) => {\r\n   if (store.state.detail.uuid_token) {\r\n-    config.headers.userTempId = store.state.detail.uuid_token\r\n+    // config.headers.userTempId = store.state.detail.uuid_token\r\n   }\r\n   if (store.state.user.logintoken) {\r\n-    config.headers.token = store.state.user.logintoken\r\n+    // config.headers.token = store.state.user.logintoken\r\n   }\r\n \r\n   nProgress.start()\r\n \r\n"
                },
                {
                    "date": 1645861862845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import axios from 'axios'\r\n+import * as nProgress from 'nprogress';\r\n+import 'nprogress/nprogress.css'\r\n+import store from '@/store'\r\n+//利用axios对象的create方法,创建一个axios实例\r\n+const requests = axios.create({\r\n+  //配置对象\r\n+  //基础路径\r\n+  baseURL: \"https://mock.apipost.cn/app/mock/project/dc05a74e-8292-4fd7-b7a8-ff491962b806/blog\",\r\n+  timeout: 5000,\r\n+})\r\n+//请求拦截器:在发送请求之前，可以做一些事情\r\n+requests.interceptors.request.use((config) => {\r\n+  if (store.state.detail.uuid_token) {\r\n+    // config.headers.userTempId = store.state.detail.uuid_token\r\n+  }\r\n+  if (store.state.user.logintoken) {\r\n+    // config.headers.token = store.state.user.logintoken\r\n+  }\r\n+\r\n+  nProgress.start()\r\n+\r\n+  return config;\r\n+})\r\n+//响应拦截器\r\n+requests.interceptors.response.use((res) => {\r\n+  nProgress.done()\r\n+  return res.data\r\n+}, (error) => {\r\n+  console.log(error);\r\n+  return Promise.reject(new Error('响应失败'))\r\n+})\r\n+// console.log(requests.prototype);\r\n+export default requests\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645861930304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,11 @@\n   timeout: 5000,\r\n })\r\n //请求拦截器:在发送请求之前，可以做一些事情\r\n requests.interceptors.request.use((config) => {\r\n-  if (store.state.detail.uuid_token) {\r\n-    // config.headers.userTempId = store.state.detail.uuid_token\r\n-  }\r\n+  // if (store.state.detail.uuid_token) {\r\n+  //   // config.headers.userTempId = store.state.detail.uuid_token\r\n+  // }\r\n   if (store.state.user.logintoken) {\r\n     // config.headers.token = store.state.user.logintoken\r\n   }\r\n \r\n@@ -30,38 +30,5 @@\n   console.log(error);\r\n   return Promise.reject(new Error('响应失败'))\r\n })\r\n // console.log(requests.prototype);\r\n-export default requests\n-import axios from 'axios'\r\n-import * as nProgress from 'nprogress';\r\n-import 'nprogress/nprogress.css'\r\n-import store from '@/store'\r\n-//利用axios对象的create方法,创建一个axios实例\r\n-const requests = axios.create({\r\n-  //配置对象\r\n-  //基础路径\r\n-  baseURL: \"https://mock.apipost.cn/app/mock/project/dc05a74e-8292-4fd7-b7a8-ff491962b806/blog\",\r\n-  timeout: 5000,\r\n-})\r\n-//请求拦截器:在发送请求之前，可以做一些事情\r\n-requests.interceptors.request.use((config) => {\r\n-  if (store.state.detail.uuid_token) {\r\n-    // config.headers.userTempId = store.state.detail.uuid_token\r\n-  }\r\n-  if (store.state.user.logintoken) {\r\n-    // config.headers.token = store.state.user.logintoken\r\n-  }\r\n-\r\n-  nProgress.start()\r\n-\r\n-  return config;\r\n-})\r\n-//响应拦截器\r\n-requests.interceptors.response.use((res) => {\r\n-  nProgress.done()\r\n-  return res.data\r\n-}, (error) => {\r\n-  return Promise.reject(new Error('响应失败'))\r\n-})\r\n-// console.log(requests.prototype);\r\n export default requests\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645861946051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,11 @@\n requests.interceptors.request.use((config) => {\r\n   // if (store.state.detail.uuid_token) {\r\n   //   // config.headers.userTempId = store.state.detail.uuid_token\r\n   // }\r\n-  if (store.state.user.logintoken) {\r\n-    // config.headers.token = store.state.user.logintoken\r\n-  }\r\n+  // if (store.state.user.logintoken) {\r\n+  //   // config.headers.token = store.state.user.logintoken\r\n+  // }\r\n \r\n   nProgress.start()\r\n \r\n   return config;\r\n"
                },
                {
                    "date": 1645861976914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n })\r\n //请求拦截器:在发送请求之前，可以做一些事情\r\n requests.interceptors.request.use((config) => {\r\n   // if (store.state.detail.uuid_token) {\r\n-  //   // config.headers.userTempId = store.state.detail.uuid_token\r\n+  // config.headers.userTempId = store.state.detail.uuid_token\r\n   // }\r\n   // if (store.state.user.logintoken) {\r\n-  //   // config.headers.token = store.state.user.logintoken\r\n+  // config.headers.token = store.state.user.logintoken\r\n   // }\r\n \r\n   nProgress.start()\r\n \r\n"
                },
                {
                    "date": 1647435299608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n //利用axios对象的create方法,创建一个axios实例\r\n const requests = axios.create({\r\n   //配置对象\r\n   //基础路径\r\n-  baseURL: \"https://mock.apipost.cn/app/mock/project/dc05a74e-8292-4fd7-b7a8-ff491962b806/blog\",\r\n+  // baseURL: \"https://mock.apipost.cn/app/mock/project/dc05a74e-8292-4fd7-b7a8-ff491962b806/blog\",\r\n+  baseURL: \"http://www.foogeoo.ltd:9999/blog\",\r\n   timeout: 5000,\r\n })\r\n //请求拦截器:在发送请求之前，可以做一些事情\r\n requests.interceptors.request.use((config) => {\r\n"
                },
                {
                    "date": 1648596629393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,9 @@\n   // }\r\n   // if (store.state.user.logintoken) {\r\n   // config.headers.token = store.state.user.logintoken\r\n   // }\r\n-\r\n   nProgress.start()\r\n-\r\n   return config;\r\n })\r\n //响应拦截器\r\n requests.interceptors.response.use((res) => {\r\n"
                }
            ],
            "date": 1645859460949,
            "name": "Commit-0",
            "content": "import axios from 'axios'\r\nimport * as nProgress from 'nprogress';\r\nimport 'nprogress/nprogress.css'\r\nimport store from '@/store'\r\n//利用axios对象的create方法,创建一个axios实例\r\nconst requests = axios.create({\r\n  //配置对象\r\n  //基础路径\r\n  baseURL: \"https://mock.apipost.cn/app/mock/project/dc05a74e-8292-4fd7-b7a8-ff491962b806/\",\r\n  timeout: 5000,\r\n})\r\n//请求拦截器:在发送请求之前，可以做一些事情\r\nrequests.interceptors.request.use((config) => {\r\n  if (store.state.detail.uuid_token) {\r\n    config.headers.userTempId = store.state.detail.uuid_token\r\n  }\r\n  if (store.state.user.logintoken) {\r\n    config.headers.token = store.state.user.logintoken\r\n  }\r\n\r\n  nProgress.start()\r\n\r\n  return config;\r\n})\r\n//响应拦截器\r\nrequests.interceptors.response.use((res) => {\r\n  nProgress.done()\r\n  return res.data\r\n}, (error) => {\r\n  return Promise.reject(new Error('响应失败'))\r\n})\r\n// console.log(requests.prototype);\r\nexport default requests"
        }
    ]
}